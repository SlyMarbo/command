package command

import (
	"strings"
)

// Token represents a token scanned from a Scanner's input.
type Token struct {
	full            string
	modified        string
	caseInsensitive bool
}

// Blank returns true when the token is the empty string.
func (t *Token) Blank() bool {
	return t.full == ""
}

// Body returns the token, possibly after modification by
// HasPrefix and HasSuffix.
func (t *Token) Body() string {
	return t.modified
}

// Bytes returns the raw bytes of the token generated by a call
// to Scan.
func (t *Token) Bytes() []byte {
	return []byte(t.full)
}

// Equals returns true if the token is the same as any of the
// provided strings.
func (t *Token) Equals(tokens ...string) bool {
	if t.caseInsensitive {
		t.modified = strings.ToLower(t.modified)
	}
	for _, token := range tokens {
		if t.caseInsensitive {
			token = strings.ToLower(token)
		}
		if token == t.modified {
			return true
		}
	}
	return false
}

// HasPrefix returns true if the token has the given prefix. If
// the prefix matches, the string will be accessible with Body,
// with the prefix removed. The full string (with prefix) is
// still accessible with String.
func (t *Token) HasPrefix(prefix string) bool {
	if t.caseInsensitive {
		prefix = strings.ToLower(prefix)
		t.modified = strings.ToLower(t.modified)
	}
	if strings.HasPrefix(t.modified, prefix) {
		t.modified = t.modified[len(prefix):]
		return true
	}
	return false
}

// HasSuffix returns true if the token has the given suffix. If
// the suffix matches, the string will be accessible with Body,
// with the suffix removed. The full string (with suffix) is
// still accessible with String.
func (t *Token) HasSuffix(suffix string) bool {
	if t.caseInsensitive {
		suffix = strings.ToLower(suffix)
		t.modified = strings.ToLower(t.modified)
	}
	if strings.HasSuffix(t.modified, suffix) {
		t.modified = t.modified[:len(t.modified)-len(suffix)]
		return true
	}
	return false
}

// String returns the token generated by a call to Scan
// as a newly allocated string holding its bytes.
func (t *Token) String() string {
	return t.full
}
